# SwarmSH Production Docker Compose - 80/20 Optimized
# Complete production deployment with observability stack

# Docker Compose for SwarmSH Production Stack

services:
  # === CORE COORDINATION SERVICES ===
  
  # Main SwarmSH Coordination System
  swarmsh-coordination:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: swarmsh-coordination
    hostname: swarmsh-coordination
    restart: unless-stopped
    environment:
      - COORDINATION_DIR=/app
      - OTEL_SERVICE_NAME=swarmsh-coordination
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_RESOURCE_ATTRIBUTES=service.name=swarmsh-coordination,service.version=1.0.0,deployment.environment=production
      - DEPLOYMENT_ENV=production
      - AGENT_POOL_SIZE=5
    volumes:
      - swarmsh_data:/app/data
      - swarmsh_logs:/app/logs
      - swarmsh_telemetry:/app/telemetry_archive
    ports:
      - "8080:8080"  # Coordination API
    networks:
      - swarmsh-network
    depends_on:
      otel-collector:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/app/docker-healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Agent Worker Pool (Scalable)
  agent-worker:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 3
    environment:
      - COORDINATION_DIR=/app
      - OTEL_SERVICE_NAME=swarmsh-agent-worker
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - WORKER_MODE=agent
    volumes:
      - swarmsh_data:/app/data:ro
      - swarmsh_logs:/app/logs
    networks:
      - swarmsh-network
    depends_on:
      - swarmsh-coordination
    restart: unless-stopped
    command: ["/app/coordinated_real_agent_worker.sh"]

  # === OBSERVABILITY STACK ===
  
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: swarmsh-otel-collector
    hostname: otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./docker/otel-collector.yaml:/etc/otel-collector-config.yaml:ro
      - swarmsh_telemetry_data:/tmp/telemetry-data
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
      - "13133:13133" # Health check
    environment:
      - HOSTNAME=otel-collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - swarmsh-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: swarmsh-jaeger
    hostname: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
    networks:
      - swarmsh-network
    depends_on:
      otel-collector:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: swarmsh-prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - swarmsh-network
    depends_on:
      otel-collector:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: swarmsh-grafana
    hostname: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - swarmsh-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # === OPTIONAL SERVICES ===

  # Redis for coordination state (optional high-performance backend)
  redis:
    image: redis:7-alpine
    container_name: swarmsh-redis
    hostname: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - swarmsh-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: swarmsh-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - swarmsh-network
    depends_on:
      - swarmsh-coordination
      - grafana
      - jaeger
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'

# === VOLUMES ===
volumes:
  swarmsh_data:
    driver: local
  swarmsh_logs:
    driver: local
  swarmsh_telemetry:
    driver: local
  swarmsh_telemetry_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

# === NETWORKS ===
networks:
  swarmsh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16